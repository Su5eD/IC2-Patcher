--- a/ic2/core/network/DataEncoder.java
+++ b/ic2/core/network/DataEncoder.java
@@ -391,7 +391,7 @@
          final int i2 = is.readVarInt();
          boolean flag3 = is.readBoolean();
          boolean flag = !dataencoder$encodedtype.threadSafe;
-         final Object object;
+         Object object;
          if (!flag) {
             object = Array.newInstance(oclass1, i2);
          } else {
@@ -432,12 +432,13 @@
             return object;
          }
 
+         Object finalObject = object;
          return new DataEncoder.IResolvableValue<Object>() {
             public Object get() {
                Object object3 = Array.newInstance(oclass, i2);
 
                for(int l2 = 0; l2 < i2; ++l2) {
-                  Array.set(object3, l2, DataEncoder.getValue(Array.get(object, l2)));
+                  Array.set(object3, l2, DataEncoder.getValue(Array.get(finalObject, l2)));
                }
 
                return object3;
@@ -457,17 +458,17 @@
          return new ChunkPos(is.readInt(), is.readInt());
       case Collection:
          final Object object2 = decode(is, DataEncoder.EncodedType.Array);
-         if (object2 instanceof DataEncoder.IResolvableValue) {
-            return new DataEncoder.IResolvableValue<List<Object>>() {
+         if (object2 instanceof IResolvableValue) {
+            return new IResolvableValue<List<Object>>() {
                public List<Object> get() {
-                  return Arrays.<Object>asList(((DataEncoder.IResolvableValue)object2).get());
+                  return Arrays.asList((Object[])((IResolvableValue)object2).get());
                }
             };
          }
 
-         return Arrays.<Object>asList(object2);
+         return Arrays.asList((Object[])((Object[]) object2));
       case Component:
-         return (List<Object>)decode(is, DataEncoder.EncodedType.NBTTagCompound);
+         return decode(is, DataEncoder.EncodedType.NBTTagCompound);
       case CropCard:
          return Crops.instance.getCropCard(is.readString(), is.readString());
       case Double:
@@ -587,40 +588,38 @@
             } else {
                return false;
             }
+         } else if (dst instanceof FluidTank) {
+            FluidTank fluidtank = (FluidTank)src;
+            FluidTank fluidtank1 = (FluidTank)dst;
+            fluidtank1.setFluid(fluidtank.getFluid());
+            fluidtank1.setCapacity(fluidtank.getCapacity());
+         } else if (dst instanceof InvSlot) {
+            InvSlot invslot = (InvSlot)src;
+            InvSlot invslot1 = (InvSlot)dst;
+            if (invslot.size() != invslot1.size()) {
+               throw new RuntimeException("Can't sync InvSlots with mismatched sizes.");
+            }
+
+            for(int i = 0; i < invslot.size(); ++i) {
+               if (!copyValue(invslot.get(i), invslot1.get(i))) {
+                  invslot1.put(i, invslot.get(i));
+               }
+            }
+         } else if (dst instanceof TileEntityComponent) {
+            NBTTagCompound nbttagcompound = (NBTTagCompound)src;
+            ((TileEntityComponent)dst).readFromNbt(nbttagcompound);
          } else {
-            if (dst instanceof FluidTank) {
-               FluidTank fluidtank = (FluidTank)src;
-               FluidTank fluidtank1 = (FluidTank)dst;
-               fluidtank1.setFluid(fluidtank.getFluid());
-               fluidtank1.setCapacity(fluidtank.getCapacity());
-            } else if (dst instanceof InvSlot) {
-               InvSlot invslot = (InvSlot)src;
-               InvSlot invslot1 = (InvSlot)dst;
-               if (invslot.size() != invslot1.size()) {
-                  throw new RuntimeException("Can't sync InvSlots with mismatched sizes.");
-               }
-
-               for(int i = 0; i < invslot.size(); ++i) {
-                  if (!copyValue(invslot.get(i), invslot1.get(i))) {
-                     invslot1.put(i, invslot.get(i));
-                  }
-               }
-            } else if (dst instanceof TileEntityComponent) {
-               NBTTagCompound nbttagcompound = (NBTTagCompound)src;
-               ((TileEntityComponent)dst).readFromNbt(nbttagcompound);
-            } else {
-               if (!(dst instanceof Collection)) {
-                  return false;
-               }
-
-               Collection<Object> collection = (Collection)src;
-               Collection<Object> collection1 = (Collection)dst;
-               collection1.clear();
-               collection1.addAll(collection);
+            if (!(dst instanceof Collection)) {
+               return false;
             }
 
-            return true;
+            Collection<Object> collection = (Collection)src;
+            Collection<Object> collection1 = (Collection)dst;
+            collection1.clear();
+            collection1.addAll(collection);
          }
+
+         return true;
       } else {
          return false;
       }
