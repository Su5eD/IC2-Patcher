--- a/ic2/core/energy/EnergyNetLocal.java
+++ b/ic2/core/energy/EnergyNetLocal.java
@@ -44,17 +44,17 @@
    public static final double sinkResistanceFactor = 1.0D;
    public static final double sourceCurrent = 17.0D;
    public static final boolean enableCache = true;
+   private static final long logSuppressionTimeout = 300000000000L;
    private static int nextGridUid = 0;
    private static int nextNodeUid = 0;
-   private final World world = null;
-   protected final Set<Grid> grids = new HashSet<Grid>();
-   protected List<Change> changes = new ArrayList<Change>();
-   private final Map<BlockPos, Tile> registeredTiles = new HashMap<BlockPos, Tile>();
-   private final Map<IEnergyTile, Integer> pendingAdds = new WeakHashMap<IEnergyTile, Integer>();
-   private final Set<Tile> removedTiles = new HashSet<Tile>();
    private boolean locked = false;
-   private static final long logSuppressionTimeout = 300000000000L;
-   private final Map<String, Long> recentLogs = new HashMap<String, Long>();
+   private final World world = null;
+   protected final Set<Grid> grids = new HashSet<>();
+   protected List<Change> changes = new ArrayList<>();
+   private final Map<BlockPos, Tile> registeredTiles = new HashMap<>();
+   private final Map<IEnergyTile, Integer> pendingAdds = new WeakHashMap<>();
+   private final Set<Tile> removedTiles = new HashSet<>();
+   private final Map<String, Long> recentLogs = new HashMap<>();
 
    public EnergyNetLocal() {
       throw new UnsupportedOperationException();
@@ -417,14 +417,14 @@
          for(IEnergyTile ienergytile : tile.subTiles) {
             for(EnumFacing enumfacing : EnumFacing.VALUES) {
                BlockPos blockpos = EnergyNet.instance.getPos(ienergytile).offset(enumfacing);
-               Tile tile = this.registeredTiles.get(blockpos);
-               if (tile != null && tile != node.tile) {
-                  for(Node node1 : tile.nodes) {
+               Tile registeredTile = this.registeredTiles.get(blockpos);
+               if (registeredTile != null && registeredTile != node.tile) {
+                  for(Node node1 : registeredTile.nodes) {
                      if (!node1.isExtraNode()) {
                         boolean flag = false;
                         if ((node.nodeType == NodeType.Source || node.nodeType == NodeType.Conductor) && node1.nodeType != NodeType.Source) {
                            IEnergyEmitter ienergyemitter = (IEnergyEmitter)(ienergytile instanceof IEnergyEmitter ? ienergytile : node.tile.mainTile);
-                           IEnergyTile ienergytile1 = tile.getSubTileAt(blockpos);
+                           IEnergyTile ienergytile1 = registeredTile.getSubTileAt(blockpos);
                            IEnergyAcceptor ienergyacceptor = (IEnergyAcceptor)(ienergytile1 instanceof IEnergyAcceptor ? ienergytile1 : node1.tile.mainTile);
                            flag = ienergyemitter.emitsEnergyTo((IEnergyAcceptor)node1.tile.mainTile, enumfacing) && ienergyacceptor.acceptsEnergyFrom((IEnergyEmitter)node.tile.mainTile, enumfacing.getOpposite());
                         }
@@ -432,7 +432,7 @@
                         boolean flag3 = false;
                         if (!flag && (node.nodeType == NodeType.Sink || node.nodeType == NodeType.Conductor) && node1.nodeType != NodeType.Sink) {
                            IEnergyAcceptor ienergyacceptor1 = (IEnergyAcceptor)(ienergytile instanceof IEnergyAcceptor ? ienergytile : node.tile.mainTile);
-                           IEnergyTile ienergytile2 = tile.getSubTileAt(blockpos);
+                           IEnergyTile ienergytile2 = registeredTile.getSubTileAt(blockpos);
                            IEnergyEmitter ienergyemitter1 = (IEnergyEmitter)(ienergytile2 instanceof IEnergyEmitter ? ienergytile2 : node1.tile.mainTile);
                            flag3 = ienergyacceptor1.acceptsEnergyFrom((IEnergyEmitter)node1.tile.mainTile, enumfacing) && ienergyemitter1.emitsEnergyTo((IEnergyAcceptor)node.tile.mainTile, enumfacing.getOpposite());
                         }
