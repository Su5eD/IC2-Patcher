--- a/ic2/core/util/StackUtil.java
+++ b/ic2/core/util/StackUtil.java
@@ -1116,25 +1116,25 @@
    }
 
    public static List<ItemStack> getDrops(IBlockAccess world, BlockPos pos, IBlockState state, EntityPlayer player, int fortune, boolean silkTouch) {
+      ItemStack drop;
       Block block = state.getBlock();
       if (block.isAir(state, world, pos)) {
-         return Collections.<ItemStack>emptyList();
-      } else {
-         World world = null;
-         if (silkTouch) {
-            world = Util.getWorld(world);
-            if (world == null) {
-               throw new IllegalArgumentException("invalid world for silk touch: " + world);
-            }
-
-            if (player == null) {
-               player = Ic2Player.get(world);
-            }
-         }
-
-         ItemStack itemstack;
-         return silkTouch && block.canSilkHarvest(world, pos, state, player) && !isEmpty(itemstack = getPickStack(world, pos, state, player)) ? Collections.singletonList(itemstack) : getDrops(world, pos, state, block, fortune);
-      }
+         return Collections.emptyList();
+      }
+      World rawWorld = null;
+      if (silkTouch) {
+         rawWorld = Util.getWorld(world);
+         if (rawWorld == null) {
+            throw new IllegalArgumentException("invalid world for silk touch: " + world);
+         }
+         if (player == null) {
+            player = Ic2Player.get(rawWorld);
+         }
+      }
+      if (silkTouch && block.canSilkHarvest(rawWorld, pos, state, player) && !StackUtil.isEmpty(drop = StackUtil.getPickStack(rawWorld, pos, state, player))) {
+         return Collections.singletonList(drop);
+      }
+      return StackUtil.getDrops(world, pos, state, block, fortune);
    }
 
    public static boolean placeBlock(ItemStack stack, World world, BlockPos pos) {
@@ -1196,8 +1196,8 @@
    }
 
    public static boolean check2(Iterable<List<ItemStack>> list) {
-      for(List<ItemStack> list : list) {
-         if (!check(list)) {
+      for(List<ItemStack> list1 : list) {
+         if (!check(list1)) {
             return false;
          }
       }
@@ -1226,12 +1226,12 @@
    public static String toStringSafe2(Iterable<List<ItemStack>> list) {
       StringBuilder stringbuilder = new StringBuilder("[");
 
-      for(List<ItemStack> list : list) {
+      for(List<ItemStack> list1 : list) {
          if (stringbuilder.length() > 1) {
             stringbuilder.append(", ");
          }
 
-         stringbuilder.append(toStringSafe(list));
+         stringbuilder.append(toStringSafe(list1));
       }
 
       return stringbuilder.append(']').toString();
