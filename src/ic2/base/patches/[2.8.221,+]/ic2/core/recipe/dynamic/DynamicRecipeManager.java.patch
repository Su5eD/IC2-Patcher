--- a/ic2/core/recipe/dynamic/DynamicRecipeManager.java
+++ b/ic2/core/recipe/dynamic/DynamicRecipeManager.java
@@ -93,74 +93,59 @@
    }
 
    protected DynamicRecipe getRecipe(Collection<RecipeInputIngredient> input) {
+      RecipeInputIngredient temp;
+      ListIterator<RecipeInputIngredient> itB;
       if (input.isEmpty()) {
          return null;
-      } else {
-         List<DynamicRecipe> list = new ArrayList<DynamicRecipe>();
-
-         for(RecipeInputIngredient recipeinputingredient : input) {
-            Object object = recipeinputingredient.getUnspecific();
-            if (object instanceof Item) {
-               if (this.recipeCacheItem.get(object) != null) {
-                  list.addAll(this.recipeCacheItem.get(object));
-               }
-            } else if (object instanceof Fluid && this.recipeCacheFluid.containsKey(((Fluid)object).getName())) {
-               list.addAll(this.recipeCacheFluid.get(((Fluid)object).getName()));
-            }
-         }
-
-         if (!list.isEmpty()) {
-            label104:
-            for(DynamicRecipe dynamicrecipe : list) {
-               if (input.size() == dynamicrecipe.getInputIngredients().size()) {
-                  ListIterator<RecipeInputIngredient> listiterator = (new ArrayList<RecipeInputIngredient>(dynamicrecipe.getInputIngredients())).listIterator();
-
-                  for(RecipeInputIngredient recipeinputingredient1 : input) {
-                     if (!listiterator.hasNext()) {
-                        continue label104;
-                     }
-
-                     RecipeInputIngredient recipeinputingredient2 = listiterator.next();
-                     if (recipeinputingredient2.matches(recipeinputingredient1.ingredient) && recipeinputingredient1.getCount() >= recipeinputingredient2.getCount()) {
-                        listiterator.remove();
-
-                        while(listiterator.hasPrevious()) {
-                           listiterator.previous();
-                        }
-                     }
-                  }
-
-                  return dynamicrecipe;
-               }
-            }
-         }
-
-         label79:
-         for(DynamicRecipe dynamicrecipe1 : this.uncacheableRecipes) {
-            if (input.size() == dynamicrecipe1.getInputIngredients().size()) {
-               ListIterator<RecipeInputIngredient> listiterator1 = (new ArrayList<RecipeInputIngredient>(dynamicrecipe1.getInputIngredients())).listIterator();
-
-               for(RecipeInputIngredient recipeinputingredient3 : input) {
-                  if (!listiterator1.hasNext()) {
-                     continue label79;
-                  }
-
-                  RecipeInputIngredient recipeinputingredient4 = listiterator1.next();
-                  if (recipeinputingredient4.matches(recipeinputingredient3.ingredient) && recipeinputingredient3.getCount() >= recipeinputingredient4.getCount()) {
-                     listiterator1.remove();
-
-                     while(listiterator1.hasPrevious()) {
-                        listiterator1.previous();
-                     }
-                  }
-               }
-
-               return dynamicrecipe1;
-            }
-         }
-
-         return null;
-      }
+      }
+      ArrayList<DynamicRecipe> recipes = new ArrayList();
+      for (RecipeInputIngredient entry : input) {
+         Object unspecific = entry.getUnspecific();
+         if (unspecific instanceof Item) {
+            if (this.recipeCacheItem.get(unspecific) == null) continue;
+            recipes.addAll(this.recipeCacheItem.get(unspecific));
+            continue;
+         }
+         if (!(unspecific instanceof Fluid) || !this.recipeCacheFluid.containsKey(((Fluid)unspecific).getName())) continue;
+         recipes.addAll(this.recipeCacheFluid.get(((Fluid)unspecific).getName()));
+      }
+      if (!recipes.isEmpty()) {
+         block1: for (DynamicRecipe recipe : recipes) {
+            if (input.size() != recipe.getInputIngredients().size()) continue;
+            itB = new ArrayList<RecipeInputIngredient>(recipe.getInputIngredients()).listIterator();
+            block2: for (RecipeInputIngredient entry : input) {
+               while (itB.hasNext()) {
+                  temp = itB.next();
+                  if (!temp.matches(entry.ingredient) || entry.getCount() < temp.getCount()) continue;
+                  itB.remove();
+                  while (itB.hasPrevious()) {
+                     itB.previous();
+                  }
+                  continue block2;
+               }
+               continue block1;
+            }
+            return recipe;
+         }
+      }
+      block5: for (DynamicRecipe recipe : this.uncacheableRecipes) {
+         if (input.size() != recipe.getInputIngredients().size()) continue;
+         itB = new ArrayList<RecipeInputIngredient>(recipe.getInputIngredients()).listIterator();
+         block6: for (RecipeInputIngredient entry : input) {
+            while (itB.hasNext()) {
+               temp = itB.next();
+               if (!temp.matches(entry.ingredient) || entry.getCount() < temp.getCount()) continue;
+               itB.remove();
+               while (itB.hasPrevious()) {
+                  itB.previous();
+               }
+               continue block6;
+            }
+            continue block5;
+         }
+         return recipe;
+      }
+      return null;
    }
 
    public DynamicRecipe findRecipe(ItemStack[] items, FluidStack[] fluids) {
