--- a/ic2/core/item/upgrade/ItemUpgradeModule.java
+++ b/ic2/core/item/upgrade/ItemUpgradeModule.java
@@ -11,6 +11,8 @@
 import ic2.api.upgrade.UpgradeRegistry;
 import ic2.core.IC2;
 import ic2.core.IHasGui;
+import ic2.core.block.TileEntityInventory;
+import ic2.core.block.invslot.InvSlot;
 import ic2.core.block.state.IIdProvider;
 import ic2.core.init.Localization;
 import ic2.core.item.IHandHeldSubInventory;
@@ -23,12 +25,9 @@
 import ic2.core.util.StackUtil;
 import ic2.core.util.Util;
 import java.text.DecimalFormat;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
+
+import mods.su5ed.ic2patcher.IC2PatcherConfig;
 import net.minecraft.client.renderer.ItemMeshDefinition;
 import net.minecraft.client.renderer.block.model.ModelBakery;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
@@ -41,7 +40,6 @@
 import net.minecraft.util.EnumActionResult;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumHand;
-import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraftforge.client.model.ModelLoader;
@@ -299,60 +297,119 @@
       int i = StackUtil.getSize(stack);
       TileEntity tileEntity = (TileEntity)parent;
       boolean flag = false;
+
       switch(type) {
          case ejector:
-            int k1 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
+            if (!shouldTickEjector(type, tileEntity)) return flag;
+            int amount1 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
 
+            int moved1 = 0;
             for(StackUtil.AdjacentInv adjacentInv : getTargetInventories(stack, tileEntity)) {
-               StackUtil.transfer(tileEntity, adjacentInv.te, adjacentInv.dir, k1);
+               moved1 += StackUtil.transfer(tileEntity, adjacentInv.te, adjacentInv.dir, amount1);
             }
 
+            if (moved1 != amount1) tileEntity.getTileData().setLong("pushCooldown", tileEntity.getWorld().getTotalWorldTime());
             return flag;
          case advanced_ejector:
-            int j1 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
+            if (!shouldTickEjector(type, tileEntity)) return flag;
+            int amount2 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
 
+            int moved2 = 0;
             for(StackUtil.AdjacentInv adjacentInv : getTargetInventories(stack, tileEntity)) {
-               StackUtil.transfer(tileEntity, adjacentInv.te, adjacentInv.dir, j1, stackChecker(stack));
+               moved2 += StackUtil.transfer(tileEntity, adjacentInv.te, adjacentInv.dir, amount2, stackChecker(stack));
             }
 
+            if (moved2 != amount2) tileEntity.getTileData().setLong("pushCooldown", tileEntity.getWorld().getTotalWorldTime());
             return flag;
          case pulling:
-            int i1 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
+            if (!shouldTickPulling(type, tileEntity)) return flag;
+            int amount3 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
 
             for(StackUtil.AdjacentInv adjacentInv : getTargetInventories(stack, tileEntity)) {
-               StackUtil.transfer(adjacentInv.te, tileEntity, adjacentInv.dir.getOpposite(), i1);
+               StackUtil.transfer(adjacentInv.te, tileEntity, adjacentInv.dir.getOpposite(), amount3);
             }
 
             return flag;
          case advanced_pulling:
-            int l = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
+            if (!shouldTickPulling(type, tileEntity)) return flag;
+            int amount4 = (int)Math.pow(4.0D, (double)Math.min(4, i - 1));
 
             for(StackUtil.AdjacentInv adjacentInv : getTargetInventories(stack, tileEntity)) {
-               StackUtil.transfer(adjacentInv.te, tileEntity, adjacentInv.dir.getOpposite(), l, stackChecker(stack));
+               StackUtil.transfer(adjacentInv.te, tileEntity, adjacentInv.dir.getOpposite(), amount4, stackChecker(stack));
             }
 
             return flag;
          case fluid_ejector:
             if (!LiquidUtil.isFluidTile(tileEntity, null)) return false;
-            int k = (int)(50.0D * Math.pow(4.0D, (double)Math.min(4, i - 1)));
+            if (!shouldTickEjector(type, tileEntity)) return flag;
+            int amount5 = (int)(50.0D * Math.pow(4.0D, (double)Math.min(4, i - 1)));
 
             for(LiquidUtil.AdjacentFluidHandler adjacentFluidHandler : getTargetFluidHandlers(stack, tileEntity)) {
-               LiquidUtil.transfer(tileEntity, adjacentFluidHandler.dir, adjacentFluidHandler.handler, k);
+               LiquidUtil.transfer(tileEntity, adjacentFluidHandler.dir, adjacentFluidHandler.handler, amount5);
             }
 
             return flag;
          case fluid_pulling:
             if (!LiquidUtil.isFluidTile(tileEntity, null)) return false;
-            int j = (int)(50.0D * Math.pow(4.0D, (double)Math.min(4, i - 1)));
+            if (!shouldTickEjector(type, tileEntity)) return flag;
+            int amount6 = (int)(50.0D * Math.pow(4.0D, (double)Math.min(4, i - 1)));
 
             for(LiquidUtil.AdjacentFluidHandler adjacentFluidHandler : getTargetFluidHandlers(stack, tileEntity)) {
-               LiquidUtil.transfer(adjacentFluidHandler.handler, adjacentFluidHandler.dir.getOpposite(), tileEntity, j);
+               LiquidUtil.transfer(adjacentFluidHandler.handler, adjacentFluidHandler.dir.getOpposite(), tileEntity, amount6);
             }
 
             return flag;
          default:
             return false;
       }
+   }
+
+   private static boolean shouldTickEjector(UpgradeType type, TileEntity parent) {
+      if (!IC2PatcherConfig.get().enableUpgradeTickInterval) return true;
+      long time = parent.getWorld().getTotalWorldTime();
+      if (type != UpgradeType.fluid_ejector && parent.getTileData().getLong("pushCooldown") + 20 > time) return false;
+      if (time % IC2PatcherConfig.get().upgradeTickInterval == 0 || type == UpgradeType.fluid_ejector) return true;
+
+      // Some machines (like batch crafter) have differently named IO slots, making those optimizations non-functional in few scenarios.
+      TileEntityInventory inv = (TileEntityInventory) parent;
+      InvSlot output = inv.getInvSlot("output");
+      if (output != null) {
+         for (ItemStack itemStack : output) {
+            if (itemStack.getCount() >= output.getStackSizeLimit()) return true;
+         }
+      }
+
+      return false;
+   }
+
+   private static boolean shouldTickPulling(UpgradeType type, TileEntity parent) {
+      if (
+         !IC2PatcherConfig.get().enableUpgradeTickInterval ||
+         parent.getWorld().getTotalWorldTime() % IC2PatcherConfig.get().upgradeTickInterval == 0 ||
+         type == UpgradeType.fluid_pulling
+      ) return true;
+
+      // Some machines (like batch crafter) have differently named IO slots, making those optimizations non-functional in few scenarios.
+      TileEntityInventory inv = (TileEntityInventory) parent;
+      InvSlot output = inv.getInvSlot("output");
+      if (output != null) {
+         boolean outputFull = true;
+         for (ItemStack itemStack : output)
+            outputFull = outputFull && itemStack.getCount() >= output.getStackSizeLimit();
+         if (outputFull) return false;
+      }
+
+      InvSlot input = inv.getInvSlot("input");
+      boolean inputFull = true;
+
+      if (input != null) {
+         for (ItemStack itemStack : input)
+            inputFull = inputFull && itemStack.getCount() >= input.getStackSizeLimit();
+      } else {
+         inputFull = false;
+      }
+
+      return !inputFull;
    }
 
    private static Predicate<ItemStack> stackChecker(final ItemStack stack) {
