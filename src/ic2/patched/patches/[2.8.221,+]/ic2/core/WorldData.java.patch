--- a/ic2/core/WorldData.java
+++ b/ic2/core/WorldData.java
@@ -3,6 +3,7 @@
 import ic2.core.block.personal.TradingMarket;
 import ic2.core.energy.grid.EnergyNetLocal;
 import ic2.core.network.TeUpdateDataServer;
+import ic2.core.util.LogCategory;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
@@ -28,6 +29,7 @@
    boolean continuousUpdatesInUse = false;
    final List<IWorldTickCallback> continuousUpdatesToAdd = new ArrayList<IWorldTickCallback>();
    final List<IWorldTickCallback> continuousUpdatesToRemove = new ArrayList<IWorldTickCallback>();
+   private final World world;
    public final EnergyNetLocal energyNet;
    public final Map<TileEntity, TeUpdateDataServer> tesToUpdate = new IdentityHashMap<TileEntity, TeUpdateDataServer>();
    public final TradingMarket tradeMarket;
@@ -46,13 +48,14 @@
          this.tradeMarket = null;
          this.windSim = null;
       }
-
+      this.world = world;
    }
 
    public static WorldData get(World world) {
       return get(world, true);
    }
 
+   private static boolean worldDataWarningDetails = false;
    public static WorldData get(World world, boolean load) {
       if (world == null) {
          throw new IllegalArgumentException("world is null");
@@ -65,9 +68,28 @@
             if (worlddata1 != null) {
                worlddata = worlddata1;
             }
+            IC2.log.debug(LogCategory.EnergyNet, "World with id %d loaded.", world.provider.getDimension());
 
             return worlddata;
          } else {
+            if (load && world != worlddata.world) {
+               if (world.getClass().equals(worlddata.world.getClass())) {
+                  World oldWorld = worlddata.world;
+                  worlddata = new WorldData(world);
+                  concurrentmap.put(world.provider.getDimension(), worlddata);
+                  IC2.log.warn(LogCategory.EnergyNet, "The dimension %d had the wrong world referenced (%s) and was replaced with the current one (%s).", world.provider.getDimension(), oldWorld.toString(), world.toString());
+                  IC2.log.warn(LogCategory.EnergyNet, "This is likely caused by missing or incorrect ordered world load / unload events.");
+               } else {
+                  IC2.log.error(LogCategory.EnergyNet, "The dimension %d has the wrong world referenced (%s), however new reference (%s) isn't the same class as the original!", worlddata.world.provider.getDimension(), worlddata.world.toString(), world.toString());
+                  if (!worldDataWarningDetails) {
+                     IC2.log.error(LogCategory.EnergyNet, "This might cause issues with your EnergyNet, and counts as incompatibility with mod overriding the world object.");
+                     IC2.log.error(LogCategory.EnergyNet, "World reference wasn't replaced, leaving old WorldData, EnergyNet and WindSim in place.");
+                     IC2.log.error(LogCategory.EnergyNet, "Expected: Object of %s, got: %s", worlddata.world.toString(), world.toString());
+                     IC2.log.error(LogCategory.EnergyNet, "Note: This message won't get repeated next time this happens to reduce log spam!");
+                     worldDataWarningDetails = true;
+                  }
+               }
+            }
             return worlddata;
          }
       }
@@ -75,6 +97,14 @@
 
    public static void onWorldUnload(World world) {
       getIndex(!world.isRemote).remove(Integer.valueOf(world.provider.getDimension()));
+      IC2.log.debug(LogCategory.EnergyNet, "World with id %d unloaded.", world.provider.getDimension());
+   }
+
+   public static void resetMaps() {
+      idxServer.clear();
+      if (idxClient != null) {
+         idxClient.clear();
+      }
    }
 
    private static ConcurrentMap<Integer, WorldData> getIndex(boolean simulating) {
